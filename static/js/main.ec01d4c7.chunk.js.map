{"version":3,"sources":["Components/Common/FormsControls.module.css","Components/Person/Person.module.css","Components/Common/FormsControls.js","Components/Common/Validator.js","Components/Person/CreatePersonForm.jsx","Components/API/API.js","Components/Redux/person-reducer.js","Components/Person/CreatePerson.jsx","Components/Common/DeletePerson.js","Components/Person/UpdatePersonForm.jsx","Components/Person/UpdatePersonContainer.jsx","Components/Common/UpdatePerson.js","Components/Person/Person.jsx","Components/Persons/Persons.jsx","Components/Persons/PersonsContainer.jsx","Components/Redux/store.js","App.js","serviceWorker.js","index.js","Components/Common/Common.module.css"],"names":["module","exports","Input","input","meta","props","child","element","showError","touched","error","className","StyleSheet","warning","requiredField","value","CreatePersonForm","reduxForm","form","handleSubmit","console","log","css","onSubmit","Field","placeholder","component","name","validate","type","instance","axios","baseURL","personAPI","get","then","response","data","userId","id","newFirstName","newLastName","put","firstName","lastName","post","delete","initialState","persons","personReducer","state","action","newUser","setUserSucces","getUsers","dispatch","a","updateUser","CreatePersonComponent","formData","addNewUser","React","Component","connect","DeletePerson","person","onDeleteUser","btn","onClick","UpdatePersonForm","update","UpdatePersonComponent","values","initializeData","this","initialize","getUser","useState","editMode","setEditMode","onBlur","answer","Person","onUpdateUser","tbl","col","Persons","users","map","p","deleteUser","PersonsContainer","prevProps","prevState","snapshot","length","compose","reducers","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,6BAA6B,aAAe,oCAAoC,KAAO,8B,qGCAjHD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,IAAM,oBAAoB,OAAS,yB,mLCG9FC,EAAQ,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,KAAyBC,GAAY,EAA/BC,MAA+B,EAAxBC,QAAwB,mDAC1DC,EAAYJ,EAAKK,SAAWL,EAAKM,MAEvC,OACI,yBAAKC,UAAWH,EAAYI,IAAWF,MAAQ,IAC3C,6BACI,2CAAWP,EAAWE,KAEzBG,GAAa,8BAAOJ,EAAKM,QAAiBN,EAAKS,SAAW,8BAAOT,EAAKS,QAAZ,O,iBCZ1DC,EAAgB,SAACC,GAC1B,IAAIA,EAEJ,MAAO,qBC6BIC,EAJUC,YAAU,CAC/BC,KAAM,UADeD,EAtBJ,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAIpB,OAFAC,QAAQC,IAAI,CAACP,IAGT,0BAAMH,UAAWW,IAAIJ,KAAMK,SAAUJ,GACjC,kBAACK,EAAA,EAAD,CAAOC,YAAa,kBAAmBC,UAAWxB,EAAOyB,KAAM,eAC3DC,SAAU,CAACd,GACXe,KAAM,SAEV,kBAACL,EAAA,EAAD,CAAOC,YAAa,iBAAkBC,UAAWxB,EAAOyB,KAAM,cAC1DC,SAAU,CAACd,GACXe,KAAM,SACV,6BAEI,4BAAQA,KAAM,UAAd,oG,0CCnBVC,E,OAAWC,OAAa,CAC1BC,QAAS,0BAGAC,EAAY,WAEjB,OACIH,EACKI,IADL,WAEKC,MAAK,SAAAC,GACF,OAAOA,EAASC,SANvBJ,EAAY,SAWbK,GAEJ,OADAlB,QAAQC,IAAIiB,GAERR,EACKI,IADL,kBACoBI,IACfH,MAAK,SAAAC,GAEF,OADAhB,QAAQC,IAAIe,GACLA,EAASC,SAlBvBJ,EAAY,YAuB0B,IAAlCM,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YAG3B,OAFArB,QAAQC,IAAI,CAAEkB,KAAIC,eAAcC,gBAG5BX,EACKY,IADL,kBACoBH,GAAM,CAAEI,UAAWH,EAAcI,SAAUH,EAAaF,GAAIA,IAC3EJ,MAAK,SAAAC,GAEF,OADAhB,QAAQC,IAAIe,EAASC,MACdD,EAASC,SA/BvBJ,EAAY,YAoCmB,IAA9BO,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YAEpB,OADArB,QAAQC,IAAI,CAAEmB,eAAcC,gBAExBX,EACKe,KADL,UACqB,CAAEF,UAAWH,EAAcI,SAAUH,IACrDN,MAAK,SAAAC,GACF,OAAOA,MA1CdH,EAAY,SA+CVK,GAEP,OADAlB,QAAQC,IAAIiB,GAERR,EACKgB,OADL,kBACuBR,IAClBH,MAAK,SAAAC,GAEF,OADAhB,QAAQC,IAAIiB,GACLF,MCrDrBW,EAAe,CACjBC,QAAS,CACL,CAAET,GAAI,EAAGI,UAAW,OAAQC,SAAU,KACtC,CAAEL,GAAI,EAAGI,UAAW,OAAQC,SAAU,OAwC/BK,EApCO,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACpD,OAAQA,EAAOtB,MACX,IAdS,WAeL,IAAIuB,EAAU,CACVb,GAAI,EACJI,UAAWQ,EAAOX,aAClBI,SAAUO,EAAOV,aAErB,OAAO,2BACAS,GADP,IAEIF,QAAQ,GAAD,mBAAME,EAAMF,SAAZ,CAAqBI,MAGpC,IAxBY,cA8BZ,IA7BU,YA8BN,OAAO,2BACAF,GADP,IAEIF,QAASG,EAAOH,UAGxB,IAlCS,WAoCL,OAAO,eACAE,GAGX,QACI,OAAOA,IAUNG,EAAgB,SAACL,GAAD,MAAc,CAAEnB,KAnD5B,WAmD4CmB,YAGhDM,EAAW,yDAAM,WAAOC,GAAP,eAAAC,EAAA,sEACLvB,IADK,OACtBG,EADsB,OAE1BmB,EANwC,CAAE1B,KAnD5B,YAmD6CmB,QAMnCZ,IAFE,2CAAN,uDAiBXqB,EAAa,SAAC,GAAD,IAAGlB,EAAH,EAAGA,GAAII,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,SAAlB,8CAAgC,WAAOW,GAAP,eAAAC,EAAA,6DACtDpC,QAAQC,IAAIsB,EAAWC,GAD+B,SAIjCX,EAAsB,CAACM,KAAII,YAAWC,aAJL,OAIlDR,EAJkD,OAKtDmB,EAASF,EAAcjB,IACvBmB,EAASD,KAN6C,2CAAhC,uDCvEpBI,E,uKAEQ,IAAD,OAML,OACI,6BACI,kBAAC,EAAD,CAAkBnC,SAPT,SAACoC,GACdvC,QAAQC,IAAIsC,GACZ,EAAKtD,MAAMuD,WAAWD,W,GALEE,IAAMC,WA0B3BC,eAPO,SAACb,GAAD,MAAY,CAC9BP,UAAWO,EAAMF,QAAQL,UACzBC,SAAUM,EAAMF,QAAQJ,YAKY,CAAEgB,WDsDhB,SAAC,GAAD,IAAGpB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,YAAjB,8CAAmC,WAAOc,GAAP,eAAAC,EAAA,sEAEpCvB,EAAkB,CAAEO,eAAcC,gBAFE,OAErDL,EAFqD,OAGzDhB,QAAQC,IAAIe,GACZmB,EApC0C,CAAE1B,KAnD/B,WAmD+CmB,QAoClCZ,EAASC,OACnCkB,EAASD,KALgD,2CAAnC,wDCtDXS,CAAyCL,G,wBCnBzCM,EARM,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAC5B,OACI,6BACI,4BAAQvD,UAAS,UAAOW,IAAI6C,IAAX,YAAkB7C,IAAIwB,QAAUsB,QAAW,WAAQF,EAAaD,EAAO1B,MAAxF,O,iBCwBG8B,EAJUpD,YAAU,CAC/BC,KAAM,gBADeD,EAtBJ,SAAC,GAAyC,IAAxCE,EAAuC,EAAvCA,aAAcwB,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAE5C,OACI,0BAAMjC,UAAS,WAAMW,IAAIJ,KAAV,YAAkBI,IAAIgD,QAAUnD,aAAcA,GACzD,kBAACK,EAAA,EAAD,CAAOE,UAAWxB,EAAOyB,KAAM,YAAaZ,MAAO4B,EAE/Cd,KAAM,SAEV,kBAACL,EAAA,EAAD,CAAOE,UAAWxB,EAAOyB,KAAM,WAAYZ,MAAO6B,EAE9Cf,KAAM,SACV,6BAEI,4BAAQA,KAAM,UAAd,oGCRV0C,E,kDAEF,WAAYlE,GAAQ,IAAD,uBACf,cAAMA,IAMVc,aAAe,SAACqD,GACZpD,QAAQC,IAAI,EAAKhB,OACjBe,QAAQC,IAAImD,EAAOzD,QAPnB,IAAIkD,EAAS,CAAEtB,UAAW,EAAKtC,MAAMsC,UAAWC,SAAU,EAAKvC,MAAMuC,SAAUL,GAAI,EAAKlC,MAAMkC,IAF/E,OAGf,EAAKlC,MAAMoE,eAAeR,GAHX,E,qDAkBf,OACI,6BACI,kBAAC,EAAD,CAAkB9C,aAAcuD,KAAKvD,oB,GAtBjB0C,IAAMC,WA0C3BC,eAbS,SAACb,GAAD,MAAY,CAChCX,GAAIW,EAAMF,QAAQT,OAGK,SAACgB,GACxB,MAAO,CACHkB,eAAgB,SAACR,GACbV,EAASoB,YAAW,eAAgBV,KAExCR,gBAIOM,CAA6CQ,GClB7CR,eAHO,SAACb,MAGiB,CAAE0B,QL8BnB,SAACtC,GAAD,8CAAY,WAAOiB,GAAP,eAAAC,EAAA,sEACVvB,EAAkBK,GADR,OAC3BF,EAD2B,OAG/BmB,EAASF,EAAcjB,IACvBmB,EAASD,KAJsB,2CAAZ,wDK9BRS,EA3BM,SAAC1D,GAAW,IAAD,EAEEwE,oBAAS,GAFX,mBAEvBC,EAFuB,KAEbC,EAFa,KAc5B,OACI,6BACKD,EAAW,6BAAK,kBAAC,EAAD,CAAuBvC,GAAIlC,EAAM4D,OAAO1B,GAAII,UAAWtC,EAAM4D,OAAOtB,UAAWC,SAAUvC,EAAM4D,OAAOrB,SAAUoC,OAZtH,WACfD,GAAY,OAWwJ,4BAAQpE,UAAS,UAAKW,IAAI6C,IAAT,YAAgB7C,IAAIgD,QAAUF,QARtM,WACbW,GAAY,GACZ,IAAIE,EAAS5E,EAAMuE,QAAQvE,EAAM4D,OAAO1B,IACxCnB,QAAQC,IAAI4D,KAKwJ,SCQ7JC,EAzBA,SAAC,GAA4C,IAA1CjB,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,aAAciB,EAAmB,EAAnBA,aAEpC,OACI,yBAAKxE,UAAWW,IAAI8D,KAChB,+BACI,4BACI,wBAAIzE,UAAaW,IAAI+D,KAChBpB,EAAOtB,WAEZ,4BACKsB,EAAOrB,UAEZ,4BACI,kBAAC,EAAD,CAAcsB,aAAcA,EAAcD,OAAQA,KAEtD,4BACI,kBAAC,EAAD,CAAckB,aAAcA,EAAclB,OAAQA,SCP3DqB,EAZC,SAACjF,GAEb,OACI,6BACKA,EAAMkF,MAAMvC,QAAQwC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAC9BxB,OAAUwB,EACVvB,aAAgB7D,EAAMqF,WACtBP,aAAgB9E,EAAMoD,kBCJ5BkC,E,kLAIEjB,KAAKrE,MAAMiD,a,yCAGIsC,EAAWC,EAAWC,GAGjCF,EAAUL,MAAMvC,QAAQ+C,QAAUrB,KAAKrE,MAAMkF,MAAMvC,QAAQ+C,QAC3DrB,KAAKrE,MAAMiD,a,+BAKf,OACI,6BACI,kBAAC,EAAD,CACAiC,MAASb,KAAKrE,MAAMkF,MACpBG,WAAchB,KAAKrE,MAAMqF,WACzBjC,WAAciB,KAAKrE,MAAMoD,kB,GArBVI,IAAMC,WAmCtBkC,cACXjC,aAPkB,SAACb,GACnB,MAAO,CACHqC,MAAOrC,EAAMF,WAKQ,CAACM,WAAUoC,WR6Bd,SAACpD,GAAD,8CAAY,WAAOiB,GAAP,SAAAC,EAAA,sEACbvB,EAAqBK,GADR,cAElCiB,EAASD,KAFyB,2CAAZ,uDQ7B0BG,eADrCuC,CAEbL,G,oBCrCEM,GAAWC,YAAgB,CAC3BlD,QAASC,EACT/B,KAAMiF,OAGJC,GAAmBC,OAAOC,sCAAwCN,IAGzDO,GAFDC,YAAYP,GAAUG,GAAiBK,YAAgBC,Q,UCiBtDC,OApBf,WACE,OACE,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAUJ,MAAOA,IACf,yBAAK5F,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,UCJUiG,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAAhH,GACLU,QAAQV,MAAMA,EAAMiH,a,mBExI5B3H,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,uBAAuB,OAAS,0B","file":"static/js/main.ec01d4c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__2SeOU\",\"summaryError\":\"FormsControls_summaryError__1vHei\",\"form\":\"FormsControls_form__1CYe2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tbl\":\"Person_tbl__3W8P4\",\"btns\":\"Person_btns__25UWO\",\"btn\":\"Person_btn__2cgnY\",\"update\":\"Person_update__1_6--\"};","import React from 'react';\r\nimport StyleSheet from './FormsControls.module.css';\r\nimport { Field } from 'redux-form';\r\n\r\nexport const Input = ({ input, meta, child, element, ...props }) => {\r\n    const showError = meta.touched && meta.error;\r\n\r\n    return (\r\n        <div className={showError ? StyleSheet.error : ''}>\r\n            <div>\r\n                <input {...input} {...props} />\r\n            </div>\r\n            {showError && <span>{meta.error}</span> || meta.warning && <span>{meta.warning} </span>}\r\n        </div>\r\n    )\r\n};","export const requiredField = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n        if (value && value.length >  maxLength) return `Max length is ${maxLength} symbols`;\r\n        return undefined;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../Common/FormsControls';\r\nimport css from './Person.module.css';\r\nimport { requiredField } from './../Common/Validator'\r\n\r\nconst CreatePerson = ({ handleSubmit }) => {\r\n\r\n    console.log([requiredField])\r\n\r\n    return (\r\n        <form className={css.form} onSubmit={handleSubmit}>\r\n            <Field placeholder={'Enter firstname'} component={Input} name={'newFirstName'}\r\n                validate={[requiredField]}\r\n                type={'text'} />\r\n\r\n            <Field placeholder={'Enter lastname'} component={Input} name={'newLastName'}\r\n                validate={[requiredField]}\r\n                type={'text'} />\r\n            <div>\r\n                {/* <button type={'reset'} >Очистить форму</button> */}\r\n                <button type={'submit'} >Отправить данные</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n};\r\n\r\nconst CreatePersonForm = reduxForm({\r\n    form: 'person'\r\n})(CreatePerson);\r\n\r\nexport default CreatePersonForm;","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:3000'\r\n});\r\n\r\nexport const personAPI = {\r\n    getUsers() {\r\n        return (\r\n            instance\r\n                .get(`persons`)\r\n                .then(response => {\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    getUser(userId) {\r\n        console.log(userId)\r\n        return (\r\n            instance\r\n                .get(`persons/${userId}`)\r\n                .then(response => {\r\n                    console.log(response)\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    updateUser({ id, newFirstName, newLastName }) {\r\n        console.log({ id, newFirstName, newLastName })\r\n        debugger\r\n        return (\r\n            instance\r\n                .put(`persons/${id}`, { firstName: newFirstName, lastName: newLastName, id: id })\r\n                .then(response => {\r\n                    console.log(response.data)\r\n                    return response.data\r\n                })\r\n        )\r\n    },\r\n\r\n    addUser({ newFirstName, newLastName }) {\r\n        console.log({ newFirstName, newLastName })\r\n        return (\r\n            instance\r\n                .post(`persons`, { firstName: newFirstName, lastName: newLastName })\r\n                .then(response => {\r\n                    return response\r\n                })\r\n        )\r\n    },\r\n\r\n    deleteUser(userId) {\r\n        console.log(userId);\r\n        return (\r\n            instance\r\n                .delete(`persons/${userId}`)\r\n                .then(response => {\r\n                    console.log(userId);\r\n                    return response\r\n                })\r\n        )\r\n    }\r\n}","import { personAPI } from './../API/API.js';\r\n\r\nconst ADD_USER = 'ADD-USER';\r\nconst UPDATE_USER = 'UPDATE-USER';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_USER = 'SET-USER';\r\n\r\nconst initialState = {\r\n    persons: [\r\n        { id: 1, firstName: 'Dave', lastName: 'h' },\r\n        { id: 2, firstName: 'Dove', lastName: 'h' }\r\n    ]\r\n};\r\n\r\nconst personReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_USER:\r\n            let newUser = {\r\n                id: 3,\r\n                firstName: action.newFirstName,\r\n                lastName: action.newLastName\r\n            }\r\n            return {\r\n                ...state,\r\n                persons: [...state.persons, newUser]\r\n            };\r\n\r\n        case UPDATE_USER:\r\n            return {\r\n                ...state,\r\n                persons: action.persons\r\n            };\r\n\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                persons: action.persons\r\n            };\r\n\r\n        case SET_USER:\r\n            // debugger\r\n            return {\r\n                ...state\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default personReducer;\r\n\r\n// actionCreator\r\nexport const addNewUserSucces = (persons) => ({ type: ADD_USER, persons });\r\nexport const updateUserSucces = (persons) => ({ type: UPDATE_USER, persons });\r\nexport const setUsersSucces = (persons) => ({ type: SET_USERS, persons });\r\nexport const setUserSucces = (persons) => ({ type: SET_USER, persons });\r\n\r\n// thunkCreator\r\nexport const getUsers = () => async (dispatch) => {\r\n    let response = await personAPI.getUsers();\r\n    dispatch(setUsersSucces(response));\r\n};\r\n\r\nexport const getUser = (userId) => async (dispatch) => {\r\n    let response = await personAPI.getUser(userId);\r\n    // debugger\r\n    dispatch(setUserSucces(response));\r\n    dispatch(getUsers());\r\n};\r\n\r\nexport const deleteUser = (userId) => async (dispatch) => {\r\n    let response = await personAPI.deleteUser(userId);\r\n    dispatch(getUsers());\r\n}\r\n\r\nexport const updateUser = ( {id, firstName, lastName}) => async (dispatch) => {\r\n    console.log(firstName, lastName)\r\n    // dispatch(getUsers(id));\r\n    debugger\r\n    let response = await personAPI.updateUser( {id, firstName, lastName});\r\n    dispatch(setUserSucces(response));\r\n    dispatch(getUsers());\r\n}\r\n\r\nexport const addNewUser = ({ newFirstName, newLastName }) => async (dispatch) => {\r\n    // console.log({newFirstName, newLastName})\r\n    let response = await personAPI.addUser({ newFirstName, newLastName });\r\n    console.log(response)\r\n    dispatch(addNewUserSucces(response.data));\r\n    dispatch(getUsers());\r\n}","import React from 'react';\r\nimport CreatePersonForm from './CreatePersonForm';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUser } from './../Redux/person-reducer';\r\n\r\nclass CreatePersonComponent extends React.Component {\r\n\r\n    render() {\r\n        const onSubmit = (formData) => {\r\n            console.log(formData);\r\n            this.props.addNewUser(formData)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <CreatePersonForm onSubmit={onSubmit} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    firstName: state.persons.firstName,\r\n    lastName: state.persons.lastName\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { addNewUser })(CreatePersonComponent);","import React from 'react';\r\nimport css from './Common.module.css'\r\n\r\n\r\nconst DeletePerson = ( {person, onDeleteUser} ) => {\r\n    return (\r\n        <div>\r\n            <button className = {`${css.btn} ${css.delete}`} onClick = {() => { onDeleteUser(person.id)} } >D</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeletePerson;\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input } from '../Common/FormsControls';\r\nimport css from './Person.module.css';\r\n\r\nconst UpdatePerson = ({handleSubmit, firstName, lastName}) => {\r\n\r\n    return (\r\n        <form className={` ${css.form} ${css.update}`} handleSubmit={handleSubmit}>\r\n            <Field component={Input} name={'firstName'} value={firstName}\r\n                // validate = {[requiredField]} \r\n                type={'text'} />\r\n\r\n            <Field component={Input} name={'lastName'} value={lastName}\r\n                // validate = {[requiredField]} \r\n                type={'text'} />\r\n            <div>\r\n                {/* <button type={'reset'} >Очистить форму</button> */}\r\n                <button type={'submit'} >Отправить данные</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n\r\n\r\n};\r\n\r\nconst UpdatePersonForm = reduxForm({\r\n    form: 'updatePerson'\r\n})(UpdatePerson);\r\n\r\nexport default UpdatePersonForm;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { initialize } from 'redux-form';\r\nimport { updateUser, getUser } from '../Redux/person-reducer';\r\nimport UpdatePersonForm from './UpdatePersonForm';\r\n\r\n\r\n\r\n\r\n\r\nclass UpdatePersonComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let person = { firstName: this.props.firstName, lastName: this.props.lastName, id: this.props.id };\r\n        this.props.initializeData(person);\r\n        // console.log(person)\r\n    }\r\n\r\n    handleSubmit = (values) => {\r\n        console.log(this.props);\r\n        console.log(values.value);\r\n        debugger\r\n        // this.props.updateUser(values)\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <UpdatePersonForm handleSubmit={this.handleSubmit} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    id: state.persons.id\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        initializeData: (person) => {\r\n            dispatch(initialize('updatePerson', person))\r\n        },\r\n        updateUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdatePersonComponent);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport UpdatePersonComponent from '../Person/UpdatePersonContainer';\r\nimport { getUser } from './../Redux/person-reducer';\r\nimport css from './Common.module.css';\r\nimport { useState } from 'react';\r\n\r\nconst UpdatePerson = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    const deactivate = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    const activate = () => {\r\n        setEditMode(true)\r\n        let answer = props.getUser(props.person.id);\r\n        console.log(answer)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ? <div><UpdatePersonComponent id={props.person.id} firstName={props.person.firstName} lastName={props.person.lastName} onBlur={deactivate} /></div> : <button className={`${css.btn} ${css.update}`} onClick={activate}  >U</button>}\r\n\r\n\r\n            {/* <UpdatePersonComponent id={this.props.person.id} firstName={this.props.person.firstName} lastName={this.props.person.lastName} onBlur={deactivate} /> */}\r\n        </div>\r\n    )\r\n};\r\n\r\nlet mapStateToProps = (state) => { }\r\n\r\n\r\nexport default connect(mapStateToProps, { getUser })(UpdatePerson);\r\n","import React from 'react';\r\nimport css from './Person.module.css'\r\nimport DeletePerson from '../Common/DeletePerson';\r\nimport UpdatePerson from './../Common/UpdatePerson';\r\n\r\n\r\nconst Person = ({ person, onDeleteUser, onUpdateUser }) => {\r\n    // console.log(onDeleteUser)\r\n    return (\r\n        <div className={css.tbl}>\r\n            <table>\r\n                <tr>\r\n                    <td className = {css.col}>\r\n                        {person.firstName}\r\n                    </td>\r\n                    <td>\r\n                        {person.lastName}\r\n                    </td>\r\n                    <td>\r\n                        <DeletePerson onDeleteUser={onDeleteUser} person={person} />\r\n                    </td>\r\n                    <td>\r\n                        <UpdatePerson onUpdateUser={onUpdateUser} person={person} />\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Person; ","import React from 'react';\r\nimport Person from './../Person/Person'\r\n\r\nconst Persons = (props) => {\r\n    // console.log(props)\r\n    return (\r\n        <div>\r\n            {props.users.persons.map(p => <Person \r\n            person = {p} \r\n            onDeleteUser = {props.deleteUser} \r\n            onUpdateUser = {props.updateUser} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons;","import React from 'react';\r\nimport { getUsers, deleteUser, updateUser } from './../Redux/person-reducer';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport Persons from './Persons'\r\n\r\nclass PersonsContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        // debugger\r\n        this.props.getUsers();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // console.log(prevProps)\r\n        // console.log(this.props)\r\n        if (prevProps.users.persons.length != this.props.users.persons.length) {\r\n            this.props.getUsers();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Persons \r\n                users = {this.props.users} \r\n                deleteUser = {this.props.deleteUser} \r\n                updateUser = {this.props.updateUser} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: state.persons\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUsers, deleteUser, updateUser})\r\n)(PersonsContainer);","\r\nimport personReducer from './person-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n    persons: personReducer,\r\n    form: formReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport CreatePerson from './Components/Person/CreatePerson';\nimport PersonsContainer from './Components/Persons/PersonsContainer';\nimport store from './Components/Redux/store';\nimport { BrowserRouter, Route, NavLink } from 'react-router-dom';\nimport UpdatePersonComponent from './Components/Person/UpdatePersonContainer'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Provider store={store}>\n        <div className=\"App\">\n          <PersonsContainer />\n\n          <CreatePerson />\n\n          {/* <Route path='/update/userId' render={() =>  <UpdatePersonComponent /> } /> */}\n          {/* <Route path='/' render={() =>   } /> */}\n          {/* <Route path='/' render={() =>   } /> */}\n        </div>\n      </Provider>\n    </BrowserRouter>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './Components/Redux/store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Common_btn__3Mzt3\",\"update\":\"Common_update__3Rb_L\",\"delete\":\"Common_delete__JUfDn\"};"],"sourceRoot":""}